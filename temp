const crypto = require("crypto");

const SECRET_KEY = "your-very-secret-key";

function generateInviteToken(userId, projectId) {
    const timestamp = Math.floor(Date.now() / 1000); // Current timestamp
    const data = `${userId}:${projectId}:${timestamp}`;
    const signature = crypto.createHmac("sha256", SECRET_KEY).update(data).digest("base64url");
    const token = Buffer.from(`${data}:${signature}`).toString("base64url");
    return token;
}

function verifyInviteToken(token, maxAge = 86400) { // Default expiry: 24 hours
    try {
        const decoded = Buffer.from(token, "base64url").toString();
        const parts = decoded.split(":");
        if (parts.length !== 4) return null; // Invalid token format

        const [userId, projectId, timestamp, signature] = parts;
        const expectedSignature = crypto.createHmac("sha256", SECRET_KEY)
            .update(userId)
            .digest("base64url");

        if (signature !== expectedSignature) return null; // Tampered token
        if (Math.floor(Date.now() / 1000) - parseInt(timestamp, 10) > maxAge) return null; // Expired

        return { userId, projectId, createdAt: parseInt(timestamp, 10) };
    } catch (error) {
        return null; // Invalid token
    }
}

// Example Usage
const token = generateInviteToken("user123", "project456");
console.log("Generated Token:", token);

const data = verifyInviteToken(token);
console.log("Decoded Data:", data);
